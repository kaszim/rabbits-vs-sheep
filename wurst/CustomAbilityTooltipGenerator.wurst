package CustomAbilityTooltipGenerator

import HashMap
import AbilityObjEditing

@configurable constant TITLE_COLOR = "|cff3B97D3"
@configurable constant MAX_TITLES = 10
@configurable constant LEARN_PATTERN = "|cffFFCC00Learn|r $name$ [|cffFFCC00$hotkey$|r]"
@configurable constant NORMAL_ACTIVE_PATTERN = "$name$ - Level $lvl$ [|cffFFCC00$hotkey$|r]"

public class CustomAbilityTooltipGenerator implements TooltipGenerator
    private constant propMap = new IterableMap<string, StringLevelClosure>
    private var description = ""

    private var levels = 1
    private var hotkey = ""
    private var name = ""
    private var castType = ""

    construct(string description)
        this.description = description
    
    construct()

    override function addProperty(string title, StringLevelClosure lc)
        propMap.put(fixTitle(title), lc)
    
    override function applyToDef(AbilityDefinition def)
        levels = propMap.has("Levels") ? fixValue(propMap.getAndRemove("Levels").run(0)).toInt() : 1
        name = propMap.has("Name") ? propMap.getAndRemove("Name").run(0) : "unnamed"
        hotkey = propMap.has("Hotkey") ? propMap.getAndRemove("Hotkey").run(0) : ""
        castType = propMap.has("Type") ? propMap.getAndRemove("Type").run(0) : "Instant Cast"
        def..setTooltipLearn(generateTooltipLearn())
        ..setTooltipLearnExtended(generateTooltipExtended(-1, true))
        for i = 1 to levels
            def..setTooltipNormal(i, generateTooltipNormal(i))
            ..setTooltipNormalExtended(i, generateTooltipExtended(i, false))

    private function fixTitle(string title) returns string
        if title.length() > 0
            var newTitle = ""
            var last = 0
            for i = 1 to title.length()-1
                if title.charAt(i).isUpper() and not title.charAt(i).isWhitespace()
                    newTitle += title.substring(last, i) + " "
                    last = i
            newTitle += title.substring(last, title.length())
            return newTitle
        else
            return title

    private function generateTooltipLearn() returns string
            return replaceRefs(LEARN_PATTERN)
           
    private function generateTooltipNormal(int lvl) returns string
        return replaceRefs(NORMAL_ACTIVE_PATTERN, lvl)
        
    private function replaceRefs(string old, int lvl) returns string
        var newString = old
        newString = newString.replace("$name$", name)
        newString = newString.replace("$hotkey$", hotkey.toUpperCase())
        newString = newString.replace("$lvl$", lvl.toString())
        return newString
        
    private function replaceRefs(string old) returns string
        var newString = old
        newString = newString.replace("$name$", name)
        newString = newString.replace("$hotkey$", hotkey.toUpperCase())
        return newString
        
    private function generateTooltipExtended(int lvl, boolean learn) returns string
        var s = ""
        if learn
            s += TITLE_COLOR + "Type:|r " + castType + "\n"
        else
            s += TITLE_COLOR + "Type: |cffFFCC00" + castType + "|r\n"

        for key in propMap
            var tmp = ""
            for i = 1 to levels
                tmp += fixValue(propMap.get(key).run(i)) + "/"
            s += TITLE_COLOR + key + ":|r " + colorLevelValue(tmp.substring(0, tmp.length() - 1), lvl, levels) + "\n"
        s+= "\n"
        s+= description
        return s
        
    private static function fixValue(string value) returns string
        var s = value
        if s.endsWith(".")
            s = s.substring(0, s.length()-1)
        else if s.length() > 1 and s.endsWith(".0")
            s = s.substring(0, s.length()-2)
        return s
        
    private static function colorLevelValue(string oldString, int lvl, int maxLevel) returns string
        var _newString = ""
        var charCount = 0
        var charPosCount = 0
        int array charPos
        for char in oldString
            if char == "/"
                charPos[charPosCount] = charCount
                charPosCount++
            charCount++
        if lvl == -1
            _newString = oldString
        else if charPosCount <= 0
            _newString = "|cffFFCC00" + oldString
        else if maxLevel <= 1
            _newString = "|cffFFCC00" + oldString
        else if lvl == 1
            _newString = "|cffFFCC00" + oldString.substring(0, charPos[0]) + "|r" + oldString.substring(charPos[0], oldString.length())
        else if lvl == maxLevel
            _newString = oldString.substring(0, charPos[lvl-2]) + "|cffFFCC00" + oldString.substring(charPos[lvl-2], oldString.length()) + "|r"
        else
            _newString = oldString.substring(0, charPos[lvl-2]) + "|cffFFCC00" + oldString.substring(charPos[lvl-2], charPos[lvl-1]) + "|r" + oldString.substring(charPos[lvl-1], oldString.length())
        return _newString