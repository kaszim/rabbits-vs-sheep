package Game
import Entity
import Creeps
import Team
import HeroEntity
import FountainOfLife
import FountainOfMana
import GoblinMerchant
import MarketPlace
import Config
import ClosureTimers
import ClosureForGroups
import GameState
import TimerDialog
import HeroContainer
import StringColoring

public class Game
    private LinkedList<Entity> entities
    private Creeps creeps
    private HeroContainer heroes
    private int roundsPlayed
    
    private LinkedList<CallbackSingle> onRoundPrepare

    construct()
        entities = new LinkedList<Entity>()
        creeps = new Creeps()
        heroes = new HeroContainer
        roundsPlayed = 0
        onRoundPrepare = new LinkedList<CallbackSingle>()

    function getHeroes(Team t) returns LinkedList<HeroEntity>
        return heroes.getHeroes(t)
    
    function start()
        gameState = GameState.PLAYING
        spawnBuildings(Team.RABBITS)
        spawnBuildings(Team.SHEEP)
        heroes.spawnForTeam(Team.RABBITS)
        heroes.spawnForTeam(Team.SHEEP)
        // Start checking for win condition
        doPeriodically(WIN_CONDITION_FREQUENCY) cb ->
            if gameState != GameState.PLAYING
                destroy cb
            else
                checkWinCondition()
        onRoundPrepare.forEach(cb -> cb.call()) // Invoke onRoundPrepare
        dispatchStartTimer()
    
    function registerOnRoundPrepare(CallbackSingle cb)
        onRoundPrepare.add(cb)
    
    private function dispatchStartTimer()
        let t = getTimer()
        let d = t.createTimerDialog()
        d.setTitle("Round starts in:")
        d.display(true)
        t.start(ROUND_PREPERATION_TIME, () -> skip)
        doAfter(ROUND_PREPERATION_TIME) ->
            DestroyTimerDialog(d)
            t.release()
            creeps.add(Team.RABBITS, Team.SHEEP.rect().getCenter())
            creeps.add(Team.SHEEP, Team.RABBITS.rect().getCenter())
    
    private function checkWinCondition()
        if creeps.getCreepCount(Team.RABBITS) > MAX_CREEP
            teamWin(Team.RABBITS, WinReason.CREEP_OVERFLOW)
        else if creeps.getCreepCount(Team.SHEEP) > MAX_CREEP
            teamWin(Team.SHEEP, WinReason.CREEP_OVERFLOW)
        else if heroes.getHeroesAlive(Team.RABBITS) <= 0
            teamWin(Team.SHEEP, WinReason.HERO_KILL) 
        else if heroes.getHeroesAlive(Team.SHEEP) <= 0
            teamWin(Team.RABBITS, WinReason.HERO_KILL)
    
    private function gameEnd(Team t)
        print(t.toString() + "won")
        gameState = GameState.END
        t.victory()
        t.oppositeTeam().defeat()
    
    private function teamWin(Team t, WinReason reason)
        print(t.toString().color(t.creepController().getColor().toColor()) + " won " + reason.toString())
        roundsPlayed++
        t.addWin()

        if t.getWins() >= WINS_NEEDED
            gameEnd(t)
            return

        gameState = GameState.INBETWEEN
        clearMap()
        doAfter(TIME_BETWEEN_ROUNDS, () -> start())
    
    private function clearMap()
        for i = 0 to 12
            Player(i)..setGold(0)..setLumber(0)
        forUnitsAll() u ->
            if u.getEntity() != null
                destroy u.getEntity()
            else
                u.remove()
        EnumItemsInRect(playableMapRect, null) ->
            if GetEnumItem().isAlive() and GetEnumItem().isVisible()
                GetEnumItem().remove()
        forDestructablesInRect(playableMapRect) dc ->
            dc.remove()
        entities.clear()
        heroes.clear()
        creeps.clear()
        
    private function spawnBuildings(Team team)
        var map = new LinkedList<int>()
        for i = 0 to 3
            map.add(i)
        map.shuffle()
        let pos = [team.rect().getLeftTop(), team.rect().getRightBot(), team.rect().getRightTop(), team.rect().getLeftBot()]
        entities.add(new FountainOfLife(DUMMY_PLAYER, pos[map.get(0)] + BUILDING_OFFSETS[map.get(0)]))
        entities.add(new FountainOfMana(DUMMY_PLAYER, pos[map.get(1)] + BUILDING_OFFSETS[map.get(1)]))
        entities.add(new GoblinMerchant(DUMMY_PLAYER, pos[map.get(2)] +BUILDING_OFFSETS[map.get(2)]))
        entities.add(new MarketPlace(DUMMY_PLAYER, pos[map.get(3)] + BUILDING_OFFSETS[map.get(3)]))

enum WinReason
    CREEP_OVERFLOW
    HERO_KILL
    
function WinReason.toString() returns string
    switch (this)
        case CREEP_OVERFLOW
            return "by creep overflow."
        case HERO_KILL
            return "as the other team has no heroes left."
        default
            return "somehow..."