package Game
import Entity
import HeroSelector
import Creeps
import Team
import HeroEntity
import FountainOfLife
import FountainOfMana
import GoblinMerchant
import MarketPlace
import Config
import ClosureTimers
import ClosureForGroups
import GameState
import TimerDialog


public class Game
    private LinkedList<Entity> entities
    private LinkedList<Entity> array[2] heroes
    private Creeps creeps
    private int roundsPlayed

    construct()
        entities = new LinkedList<Entity>()
        creeps = new Creeps()
        heroes[0] = new LinkedList<Entity>()
        heroes[1] = new LinkedList<Entity>()
        roundsPlayed = 0
    
    function start()
        gameState = GameState.PLAYING
        spawnBuildings(Team.RABBITS)
        spawnBuildings(Team.SHEEP)
        spawnHeroes(Team.RABBITS)
        spawnHeroes(Team.SHEEP)
        spawnHero(Player(6), Team.SHEEP, randomHeroId())
        // Start checking for win condition
        doPeriodically(0.1) cb ->
            if gameState != GameState.PLAYING
                destroy cb
            else
                checkWinCondition()
        
        dispatchStartTimer()
    
    private function dispatchStartTimer()
        let t = getTimer()
        let d = t.createTimerDialog()
        d.setTitle("Round starts in")
        d.display(true)
        t.start(15, () -> skip)
        doAfter(15.) ->
            DestroyTimerDialog(d)
            t.release()
            creeps.add(Team.RABBITS, Team.SHEEP.rect().getCenter())
            creeps.add(Team.SHEEP, Team.RABBITS.rect().getCenter())
    
    private function spawnHeroes(Team t)
        for p in t.getPlayers()
            spawnHero(p, t, randomHeroId())
    
    private function checkWinCondition()
        if creeps.getCreepCount(Team.RABBITS) > MAX_CREEP
            teamWin(Team.RABBITS)
        else if creeps.getCreepCount(Team.SHEEP) > MAX_CREEP
            teamWin(Team.SHEEP)
        else if heroes[Team.RABBITS.toInt()].size() <= 0
            teamWin(Team.SHEEP) 
        else if heroes[Team.SHEEP.toInt()].size() <= 0
            teamWin(Team.RABBITS)
    
    private function gameEnd(Team t)
        print(t.toInt().toString() + "won")
        gameState = GameState.END
        t.victory()
        t.oppositeTeam().defeat()
    
    private function teamWin(Team t)
        print("Won: " + (t.toInt()).toString())
        roundsPlayed++
        t.addWin()

        if t.getWins() >= WINS_NEEDED
            gameEnd(t)
            return

        gameState = GameState.INBETWEEN
        clearMap()
        doAfter(2, () -> start())
    
    private function spawnHero(player p, Team t, int id) returns Entity
        let hero = new HeroEntity(p, t.rect().getCenter(), id)
        heroes[t.toInt()].add(hero)
        EventListener.add(hero.actor, EVENT_PLAYER_UNIT_DEATH) ->
            heroes[t.toInt()].remove(hero)
            destroy hero
        return hero 
    
    private function clearMap()
        forUnitsInRect(playableMapRect) u ->
            if u.getEntity() != null
                destroy u.getEntity()
            else
                u.remove()
        entities.clear()
        heroes[0].clear()
        heroes[1].clear()
        creeps.clear()
        
    private function spawnBuildings(Team team)
        var map = new LinkedList<int>()
        for i = 0 to 3
            map.add(i)
        map.shuffle()
        let pos = [team.rect().getLeftTop(), team.rect().getRightBot(), team.rect().getRightTop(), team.rect().getLeftBot()]
        entities.add(new FountainOfLife(DUMMY_PLAYER, pos[map.get(0)].add(BUILDING_OFFSETS[map.get(0)])))
        entities.add(new FountainOfMana(DUMMY_PLAYER, pos[map.get(1)].add(BUILDING_OFFSETS[map.get(1)])))
        entities.add(new GoblinMerchant(DUMMY_PLAYER, pos[map.get(2)].add(BUILDING_OFFSETS[map.get(2)])))
        entities.add(new MarketPlace(DUMMY_PLAYER, pos[map.get(3)].add(BUILDING_OFFSETS[map.get(3)])))
        